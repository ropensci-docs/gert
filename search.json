[{"path":"https://docs.ropensci.org/gert/articles/gert.html","id":"introduce-yourself-to-git","dir":"Articles","previous_headings":"","what":"Introduce yourself to Git","title":"gert","text":"can anything Git, must first configure user name email. attach gert, actually reveals whether ’ve already done , , can see . already configured user name email? git_config_global_set(): can verify success (see global options) git_config_global(). equivalent commands command line Git: inspect change local Git config, .e. options specific one repository, use git_config() git_config_set().","code":"git_config_global_set(\"user.name\", \"Jerry Johnson\") git_config_global_set(\"user.email\", \"jerry@gmail.com\") git_config_global() #>                name           value  level #> 1 credential.helper           cache global #> 2         user.name   Jerry Johnson global #> 3        user.email jerry@gmail.com global git config --global user.name 'Jerry Johnson' git config --global user.email 'jerry@gmail.com' git config --global --list"},{"path":"https://docs.ropensci.org/gert/articles/gert.html","id":"local-repository-basics","dir":"Articles","previous_headings":"","what":"Local repository basics","title":"gert","text":"gert::git_init() essentially git init; ’s create new local repository. provide path repository want create. Note non-existing parts path created: aaa, bbb, repo_ccc (actual git repository). git_find() finds git repository path provide errors otherwise. git_init() can also create repository pre-existing directory, long empty. Cleanup.","code":"(path <- file.path(tempdir(), \"aaa\", \"bbb\", \"repo_ccc\")) #> [1] \"/tmp/Rtmp7B8iBD/aaa/bbb/repo_ccc\" dir.exists(path) #> [1] FALSE  (r <- git_init(path)) #> [1] \"/tmp/Rtmp7B8iBD/aaa/bbb/repo_ccc/\" dir.exists(path) #> [1] TRUE git_find(r) #> [1] \"/tmp/Rtmp7B8iBD/aaa/bbb/repo_ccc\"  dir.create(file.path(r, \"child_dir\")) git_find(file.path(r, \"child_dir\")) #> [1] \"/tmp/Rtmp7B8iBD/aaa/bbb/repo_ccc\"  git_find(file.path(tempdir(), \"aaa\", \"bbb\")) #> Error in libgit2::git_repository_discover: could not find repository at '/tmp/Rtmp7B8iBD/aaa/bbb' r2 <- file.path(tempdir(), \"repo_ddd\") dir.create(r2)  git_init(r2) unlink(r, recursive = TRUE) unlink(r2, recursive = TRUE)"},{"path":"https://docs.ropensci.org/gert/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Ooms. Author, maintainer. Jennifer Bryan. Contributor.","code":""},{"path":"https://docs.ropensci.org/gert/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ooms J (2024). gert: Simple Git Client R. R package version 2.1.4, https://ropensci.r-universe.dev/gert, https://docs.ropensci.org/gert/.","code":"@Manual{,   title = {gert: Simple Git Client for R},   author = {Jeroen Ooms},   year = {2024},   note = {R package version 2.1.4, https://ropensci.r-universe.dev/gert},   url = {https://docs.ropensci.org/gert/}, }"},{"path":"https://docs.ropensci.org/gert/index.html","id":"gert-","dir":"","previous_headings":"","what":"Simple Git Client for R","title":"Simple Git Client for R","text":"package joint effort rOpenSci Tidyverse team. Simple Git Client R Simple git client R based ‘libgit2’ support SSH HTTPS remotes. functions gert use basic R data types (vectors data-frames) arguments return values. User credentials shared command line ‘git’ git-credential store ssh keys stored disk ssh-agent. Linux, somewhat recent version ‘libgit2’ required; provide PPA older Ubuntu LTS versions.","code":""},{"path":"https://docs.ropensci.org/gert/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Git Client for R","text":"Linux need install libgit2: Debian: libgit2-dev Fedora / CentOS: libgit2-devel Arch Linux libgit2 suitable version libgit2 found, package automatically tries download static build.","code":"# To install the latest version install.packages(\"gert\", repos = c(     ropensci = 'https://ropensci.r-universe.dev',     CRAN = 'https://cloud.r-project.org'))      # To install the CRAN release: install.packages(\"gert\")"},{"path":"https://docs.ropensci.org/gert/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation:","title":"Simple Git Client for R","text":"homepage: https://docs.ropensci.org/gert slides: https://jeroen.github.io/gert2019/#1","code":""},{"path":"https://docs.ropensci.org/gert/index.html","id":"hello-world","dir":"","previous_headings":"","what":"Hello world","title":"Simple Git Client for R","text":"basic commands get started gert:","code":"library(gert) repo <- git_clone(\"https://github.com/r-lib/gert\") setwd(\"gert\")  # Show some info git_log(max = 10)  # Create a branch git_branch_create(\"mybranch\", checkout = TRUE)  # Commit things writeLines(\"Lorem ipsum dolor sit amet\", 'test.txt') git_add('test.txt') git_commit(\"Adding a file\", author = \"jerry <jerry@gmail.com>\") git_log(max = 10)  # Merge it in master git_branch_checkout(\"master\") git_merge(\"mybranch\") git_branch_delete(\"mybranch\")  # Remove the commit git_reset_hard(\"HEAD^\")"},{"path":"https://docs.ropensci.org/gert/index.html","id":"should-i-use-https-or-ssh-remotes","dir":"","previous_headings":"","what":"Should I use HTTPS or SSH remotes?","title":"Simple Git Client for R","text":"platforms, gert supports HTTPS SSH remotes. don’t preference, safest choice HTTPS remotes using PAT password. use well. HTTPS remotes following benefits: credentials safely stored OS, accessible gert command line git. Https works network. However ssh protocol requires port 22, often blocked public wifi networks. can authenticate https using GITHUB_PAT use GitHub API. libgit2 supports https platforms (SSH support depends libssh2 availability). : need use Github master password gert/git. Instead generate personal access token enter password pushing/pulling https remotes. works gert git command line, even 2FA enabled (). Ninja tip: use credentials::set_github_pat() automatically set GITHUB_PAT environment variable R session using value stored git credential store. safer way store PAT hardcoding .Renviron.","code":""},{"path":"https://docs.ropensci.org/gert/index.html","id":"differences-with-git2r","dir":"","previous_headings":"","what":"Differences with git2r","title":"Simple Git Client for R","text":"Gert based libgit2, just like rOpenSci package git2r. good packages. well established git2r CRAN since 2015, actively maintained Stefan Widgren, widely used. Gert started 2019, takes fresh approach based recent APIs libgit2 lessons learned using git2r. main differences:","code":""},{"path":"https://docs.ropensci.org/gert/index.html","id":"simplicity","dir":"","previous_headings":"Differences with git2r","what":"Simplicity","title":"Simple Git Client for R","text":"Gert focused high-level functions shield end-user complexity libgit2. Functions gert use standard R data types (vectors data-frames) arguments return values, easy work R users/packages. target repository either inferred current working directory specified filepath. Branches remotes referred name, much like command line git. None functions gert expose externalptr types user. R users familiar git command line, gert mostly self-explanatory, generally “just work”.","code":"> gert::git_log(max=6) # A tibble: 6 x 6   commit                        author                    time                files merge message * <chr>                         <chr>                     <dttm>              <int> <lgl> <chr> 1 6f39ba6dae890d679970c0f8bf03… Jeroen Ooms <jeroenooms@… 2020-06-16 01:16:33    17 FALSE \"Add some family ta… 2 c023c407a0f0bfa3955576bc3551… Jeroen Ooms <jeroenooms@… 2020-06-16 01:06:38     1 FALSE \"Check for matching… 3 24234060ea8e54c73ddd0bce90ff… Jeroen Ooms <jeroenooms@… 2020-06-15 13:17:57     1 FALSE \"Update fedora link… 4 e60b0fbad129f470a2f7065063fa… Jeroen Ooms <jeroenooms@… 2020-06-15 13:05:45     4 FALSE \"Tweak docs and rea… 5 629420ddccbab51c1e78f472bf06… Jeroen Ooms <jeroenooms@… 2020-06-15 12:14:25     1 FALSE \"More tests\\n\" 6 a62ce14eb887e183ad0a3cf0e22c… Jeroen Ooms <jeroenooms@… 2020-06-15 12:06:41     1 FALSE \"Fix unit test\\n\""},{"path":"https://docs.ropensci.org/gert/index.html","id":"automatic-authentication","dir":"","previous_headings":"Differences with git2r","what":"Automatic authentication","title":"Simple Git Client for R","text":"overall goal auth gert successfully discover credentials whenever also true command line git. , fail, way debug . authenticate remote git2r, often need manually pass credentials every call , e.g., git2r::clone(). always case https remote often case even ssh remote. creates special challenges new git indirect use git2r. gert, authentication done automatically using credentials package. package calls local OS credential store also used git command line. Therefore gert automatically pick https credentials safely stored OS keychain. credentials available store, gert try authenticate using GITHUB_PAT (set) GitHub https remotes. none works, safely prompts user credentials using askpass. Together, methods make https authentication “just work” scenario, without manually provide passwords R. Authentication ssh remotes bit complicated, gert try make smooth possible. First , gert tell SSH supported attaching package (case modern systems): Mac/Linux, gert first tries authenticate using credentials ssh-agent. doesn’t work look suitable ssh key system (usually id_rsa), protected passphrase, gert safely prompt user passphrase using askpass. user SSH key yet, credentials package makes easy set . One limitation remains libgit2 support ssh-agent Windows. unlikely change ssh-agent uses unix-sockets exist native Windows software.","code":"> library(gert) Linking to libgit2 v1.0.0, ssh support: YES Global config: /Users/jeroen/.gitconfig Default user: Jeroen Ooms <jeroenooms@gmail.com > library(credentials) Found git version 2.24.3 (Apple Git-128) Supported HTTPS credential helpers: cache, store Found OpenSSH_8.1p1, LibreSSL 2.7.3 Default SSH key: /Users/jeroen/.ssh/id_rsa"},{"path":"https://docs.ropensci.org/gert/index.html","id":"the-libgit2-dependency","dir":"","previous_headings":"Differences with git2r","what":"The libgit2 dependency","title":"Simple Git Client for R","text":"use Windows macOS install gert CRAN, comes “batteries included”. Gert brings prebuilt versions external dependencies, like libgit2 3rd party libraries needed support SSH TLS (HTTPS). approach guarantees gert uses libraries properly configured operating system. git2r package takes another approach bundling libgit2 source code R package, automatically building libgit2 --fly R package compiled. mostly historical reasons, recently, libgit2 available every Linux system. However problem configuring building libgit2 complicated (like system libraries) requires several platform-specific flags system dependencies. result, git2r sometimes installed missing functionality, depending detected compilation. macOS example, git2r users SSH support others . Weird problems due missing libgit2 features turn persistent, caused lot frustration. reason, gert bundle compile libgit2 source, instead always links system libraries. provide prebuilt versions libgit2 Windows, MacOS Linux-x86_64 automatically downloaded upon installation. Alternatively platforms can build gert system version libgit2, e.g.: libgit2-dev Debian/Ubuntu libgit2-devel Fedora libgit2 Arch Linux Homebrew libgit2 macOS rtools40 libgit2 Windows","code":""},{"path":"https://docs.ropensci.org/gert/reference/gert-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gert: Simple Git Client for R — gert-package","title":"gert: Simple Git Client for R — gert-package","text":"Simple git client R based 'libgit2' https://libgit2.org support SSH HTTPS remotes. functions 'gert' use basic R data types (vectors data-frames) arguments return values. User credentials shared command line 'git' git-credential store ssh keys stored disk ssh-agent.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/gert-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gert: Simple Git Client for R — gert-package","text":"Maintainer: Jeroen Ooms jeroenooms@gmail.com (ORCID) contributors: Jennifer Bryan jenny@posit.co (ORCID) [contributor]","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_archive.html","id":null,"dir":"Reference","previous_headings":"","what":"Git Archive — git_archive","title":"Git Archive — git_archive","text":"Exports files repository zip file returned function.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_archive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Git Archive — git_archive","text":"","code":"git_archive_zip(file = NULL, repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_archive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Git Archive — git_archive","text":"file name output zip file. Default returned function repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_archive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Git Archive — git_archive","text":"path zip file created","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Git Branch — git_branch","title":"Git Branch — git_branch","text":"Create, list, checkout branches.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Git Branch — git_branch","text":"","code":"git_branch(repo = \".\")  git_branch_list(local = NULL, repo = \".\")  git_branch_checkout(branch, force = FALSE, orphan = FALSE, repo = \".\")  git_branch_create(   branch,   ref = \"HEAD\",   checkout = TRUE,   force = FALSE,   repo = \".\" )  git_branch_delete(branch, repo = \".\")  git_branch_move(branch, new_branch, force = FALSE, repo = \".\")  git_branch_fast_forward(ref, repo = \".\")  git_branch_set_upstream(upstream, branch = git_branch(repo), repo = \".\")  git_branch_exists(branch, local = TRUE, repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Git Branch — git_branch","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. local set TRUE check local branches, FALSE check remote branches. Use NULL return branches. branch name branch check force overwrite existing branch orphan branch exist, checkout unborn branch ref string branch/tag/commit checkout move HEAD newly created branch new_branch target name branch move performed; name validated consistency. upstream remote branch git_branch_list, example \"origin/master\"","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Stage and commit changes — git_commit","title":"Stage and commit changes — git_commit","text":"commit changes, start staging files included commit using git_add() git_rm(). Use git_status() see overview staged unstaged changes, finally git_commit() creates new commit currently staged files. git_commit_all() convenience function automatically stages commits modified files. Note git_commit_all() add new, untracked files repository. need make explicit call git_add() start tracking new files. git_log() shows recent commits git_ls() lists files tracked repository. git_stat_files()","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stage and commit changes — git_commit","text":"","code":"git_commit(message, author = NULL, committer = NULL, repo = \".\")  git_commit_all(message, author = NULL, committer = NULL, repo = \".\")  git_commit_info(ref = \"HEAD\", repo = \".\")  git_commit_id(ref = \"HEAD\", repo = \".\")  git_commit_stats(ref = \"HEAD\", repo = \".\")  git_commit_descendant_of(ancestor, ref = \"HEAD\", repo = \".\")  git_add(files, force = FALSE, repo = \".\")  git_rm(files, repo = \".\")  git_status(staged = NULL, pathspec = NULL, repo = \".\")  git_conflicts(repo = \".\")  git_ls(repo = \".\", ref = NULL)  git_log(ref = \"HEAD\", max = 100, after = NULL, repo = \".\")  git_stat_files(files, ref = \"HEAD\", repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stage and commit changes — git_commit","text":"message commit message author git_signature value, default git_signature_default(). committer git_signature value, default author repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. ref revision string branch/tag/commit value ancestor reference potential ancestor commit files vector paths relative git root directory. Use \".\" stage changed files. force add files even gitignore staged return staged (TRUE) unstaged files (FALSE). Use NULL NA show (default). pathspec character vector paths match max lookup latest n parent commits date timestamp: include commits starting date","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stage and commit changes — git_commit","text":"git_status(), git_ls(): data frame one row per file git_log(): data frame one row per commit git_commit(), git_commit_all(): SHA","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stage and commit changes — git_commit","text":"","code":"oldwd <- getwd() repo <- file.path(tempdir(), \"myrepo\") git_init(repo) setwd(repo)  # Set a user if no default if(!user_is_configured()){   git_config_set(\"user.name\", \"Jerry\")   git_config_set(\"user.email\", \"jerry@gmail.com\") }  writeLines(letters[1:6], \"alphabet.txt\") git_status() #> # A tibble: 1 × 3 #>   file         status staged #>   <chr>        <chr>  <lgl>  #> 1 alphabet.txt new    FALSE   git_add(\"alphabet.txt\") #> # A tibble: 1 × 3 #>   file         status staged #>   <chr>        <chr>  <lgl>  #> 1 alphabet.txt new    TRUE   git_status() #> # A tibble: 1 × 3 #>   file         status staged #>   <chr>        <chr>  <lgl>  #> 1 alphabet.txt new    TRUE    git_commit(\"Start alphabet file\") #> [1] \"4c8bd6fbf7a279cdfe5347476edb3ab71072cf0f\" git_status() #> # A tibble: 0 × 3 #> # ℹ 3 variables: file <chr>, status <chr>, staged <lgl>  git_ls() #> # A tibble: 1 × 4 #>   path         filesize modified            created             #> * <chr>           <dbl> <dttm>              <dttm>              #> 1 alphabet.txt       12 2024-10-21 19:15:39 2024-10-21 19:15:39  git_log() #> # A tibble: 1 × 6 #>   commit                          author time                files merge message #> * <chr>                           <chr>  <dttm>              <int> <lgl> <chr>   #> 1 4c8bd6fbf7a279cdfe5347476edb3a… Jerry… 2024-10-21 19:15:40     1 FALSE \"Start…  cat(letters[7:9], file = \"alphabet.txt\", sep = \"\\n\", append = TRUE) git_status() #> # A tibble: 1 × 3 #>   file         status   staged #>   <chr>        <chr>    <lgl>  #> 1 alphabet.txt modified FALSE   git_commit_all(\"Add more letters\") #> [1] \"4884173fbd7359748c039828da77f1fb67003154\"  # cleanup setwd(oldwd) unlink(repo, recursive = TRUE)"},{"path":"https://docs.ropensci.org/gert/reference/git_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set Git configuration — git_config","title":"Get or set Git configuration — git_config","text":"Get set Git options, git config command line. Global settings affect user's Git operations (git config --global), whereas local settings scoped specific repository (git config --local). exist, local options always win. Four functions address four possible combinations getting vs setting global vs. local.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set Git configuration — git_config","text":"","code":"git_config(repo = \".\")  git_config_global()  git_config_set(name, value, repo = \".\")  git_config_global_set(name, value)"},{"path":"https://docs.ropensci.org/gert/reference/git_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set Git configuration — git_config","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. name Name option set value Value set. Must string, logical, number NULL (unset).","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set Git configuration — git_config","text":"git_config(): data.frame Git options \"force\" context repo, one row per option. level column reveals whether option determined global local config. git_config_global(): data.frame, git_config(), except global Git options. git_config_set(), git_config_global_set(): previous value name local global config, respectively. option previously unset, returns NULL. Returns invisibly.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_config.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get or set Git configuration — git_config","text":"entries name column automatically normalised lowercase (see https://libgit2.org/libgit2/#HEAD/type/git_config_entry details).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set Git configuration — git_config","text":"","code":"# Set and inspect a local, custom Git option r <- file.path(tempdir(), \"gert-demo\") git_init(r)  previous <- git_config_set(\"aaa.bbb\", \"ccc\", repo = r) previous #> NULL cfg <- git_config(repo = r) subset(cfg, level == \"local\") #> # A tibble: 5 × 3 #>   name                         value level #>   <chr>                        <chr> <chr> #> 1 core.bare                    false local #> 2 core.repositoryformatversion 0     local #> 3 core.filemode                true  local #> 4 core.logallrefupdates        true  local #> 5 aaa.bbb                      ccc   local cfg$value[cfg$name == \"aaa.bbb\"] #> [1] \"ccc\"  previous <- git_config_set(\"aaa.bbb\", NULL, repo = r) previous #> [1] \"ccc\" cfg <- git_config(repo = r) subset(cfg, level == \"local\") #> # A tibble: 4 × 3 #>   name                         value level #>   <chr>                        <chr> <chr> #> 1 core.bare                    false local #> 2 core.repositoryformatversion 0     local #> 3 core.filemode                true  local #> 4 core.logallrefupdates        true  local cfg$value[cfg$name == \"aaa.bbb\"] #> character(0)  unlink(r, recursive = TRUE)  if (FALSE) { # \\dontrun{ # Set global Git options git_config_global_set(\"user.name\", \"Your Name\") git_config_global_set(\"user.email\", \"your@email.com\") git_config_global() } # }"},{"path":"https://docs.ropensci.org/gert/reference/git_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Git Diff — git_diff","title":"Git Diff — git_diff","text":"View changes commit current working directory.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Git Diff — git_diff","text":"","code":"git_diff(ref = NULL, repo = \".\")  git_diff_patch(ref = NULL, repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Git Diff — git_diff","text":"ref reference \"HEAD\", commit id, NULL diff working directory repository index. repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Push and pull — git_fetch","title":"Push and pull — git_fetch","text":"Functions connect git server (remote) fetch push changes. 'credentials' package used handle authentication, credentials vignette explains various authentication methods SSH HTTPS remotes.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push and pull — git_fetch","text":"","code":"git_fetch(   remote = NULL,   refspec = NULL,   password = askpass,   ssh_key = NULL,   prune = FALSE,   verbose = interactive(),   repo = \".\" )  git_remote_ls(   remote = NULL,   password = askpass,   ssh_key = NULL,   verbose = interactive(),   repo = \".\" )  git_push(   remote = NULL,   refspec = NULL,   set_upstream = NULL,   password = askpass,   ssh_key = NULL,   mirror = FALSE,   force = FALSE,   verbose = interactive(),   repo = \".\" )  git_clone(   url,   path = NULL,   branch = NULL,   password = askpass,   ssh_key = NULL,   bare = FALSE,   mirror = FALSE,   verbose = interactive() )  git_pull(remote = NULL, rebase = FALSE, ..., repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push and pull — git_fetch","text":"remote Optional. Name remote listed git_remote_list(). unspecified current branch already tracking branch remote branch, remote honored. Otherwise, defaults origin. refspec string mapping remote local refs. Default uses default refspec remote, usually fetches branches. password string callback function get passwords authentication password protected ssh keys. Defaults askpass checks getOption('askpass'). ssh_key path object containing ssh private key. default look keys ssh-agent credentials::ssh_key_info. prune delete tracking branches longer exist remote, refspec (pull requests). verbose display progress info downloading repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. set_upstream change branch default upstream remote. NULL, set branch upstream push successful branch upstream set yet. mirror use --mirror flag force use --force flag url remote url. Typically starts https://github.com/ public repositories, https://yourname@github.com/ git@github.com/ private repos. prompted password pat needed. path Directory Git repository create. branch name branch check locally bare use --bare flag rebase TRUE try rebase instead merge local changes. possible case conflicts (get error). ... arguments passed git_fetch","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_fetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Push and pull — git_fetch","text":"Use git_fetch() git_push() sync local branch remote branch. git_pull() wrapper git_fetch() tries fast-forward local branch fetching.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push and pull — git_fetch","text":"","code":"{# Clone a small repository git_dir <- file.path(tempdir(), 'antiword') git_clone('https://github.com/ropensci/antiword', git_dir)  # Change into the repo directory olddir <- getwd() setwd(git_dir)  # Show some stuff git_log() git_branch_list() git_remote_list()  # Add a file write.csv(iris, 'iris.csv') git_add('iris.csv')  # Commit the change jerry <- git_signature(\"Jerry\", \"jerry@hotmail.com\") git_commit('added the iris file', author = jerry)  # Now in the log: git_log()  # Cleanup setwd(olddir) unlink(git_dir, recursive = TRUE) }"},{"path":"https://docs.ropensci.org/gert/reference/git_ignore.html","id":null,"dir":"Reference","previous_headings":"","what":"Git Ignore — git_ignore","title":"Git Ignore — git_ignore","text":"Test files ignored .gitignore rules","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_ignore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Git Ignore — git_ignore","text":"","code":"git_ignore_path_is_ignored(path, repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_ignore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Git Ignore — git_ignore","text":"path character vector paths test within repo repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_ignore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Git Ignore — git_ignore","text":"logical vector length path, indicating paths ignored.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merging tools — git_merge","title":"Merging tools — git_merge","text":"Use git_merge merge branch current head. Based branches diverged, function select fast-forward merge-commit strategy.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merging tools — git_merge","text":"","code":"git_merge(ref, commit = TRUE, squash = FALSE, repo = \".\")  git_merge_stage_only(ref, squash = FALSE, repo = \".\")  git_merge_find_base(ref, target = \"HEAD\", repo = \".\")  git_merge_analysis(ref, repo = \".\")  git_merge_abort(repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merging tools — git_merge","text":"ref branch commit want merge commit automatically create merge commit merge succeeds without conflicts. Set FALSE want customize commit message/author. squash omits second parent commit, make merge regular single-parent commit. repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. target branch want merge . Defaults current HEAD.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_merge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merging tools — git_merge","text":"default git_merge automatically commits merge commit upon success. However merge fails merge-conflicts, commit set FALSE, changes staged repository put merging state, manually run git_commit git_merge_abort proceed. functions low-level tools used git_merge. git_merge_find_base looks commit two branches diverged (.e. youngest common ancestor). git_merge_analysis used test merge can simply fast forwarded . git_merge_stage_only function applies stages changes, without committing fast-forwarding.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open local repository — git_open","title":"Open local repository — git_open","text":"Returns pointer libgit2 repository object.function mainly internal use; users simply reference repository gert path directory.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open local repository — git_open","text":"","code":"git_open(repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open local repository — git_open","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open local repository — git_open","text":"pointer libgit2 repository","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open local repository — git_open","text":"","code":"r <- tempfile(pattern = \"gert\") git_init(r) r_ptr <- git_open(r) r_ptr #> <git repository>: /tmp/Rtmp0bolk4/gert70063143df5[@NA] git_open(r_ptr) #> <git repository>: /tmp/Rtmp0bolk4/gert70063143df5[@NA] git_info(r) #> $path #> [1] \"/tmp/Rtmp0bolk4/gert70063143df5/\" #>  #> $bare #> [1] FALSE #>  #> $head #> [1] NA #>  #> $shorthand #> [1] NA #>  #> $commit #> [1] NA #>  #> $remote #> [1] NA #>  #> $upstream #> [1] NA #>  #> $reflist #> character(0) #>   # cleanup unlink(r, recursive = TRUE)"},{"path":"https://docs.ropensci.org/gert/reference/git_rebase.html","id":null,"dir":"Reference","previous_headings":"","what":"Cherry-Pick and Rebase — git_rebase","title":"Cherry-Pick and Rebase — git_rebase","text":"cherry-pick applies changes given commit (another branch) onto current branch. rebase resets branch state another branch (upstream) re-applies local changes cherry-picking local commits onto upstream commit history.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_rebase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cherry-Pick and Rebase — git_rebase","text":"","code":"git_rebase_list(upstream = NULL, repo = \".\")  git_rebase_commit(upstream = NULL, repo = \".\")  git_cherry_pick(commit, repo = \".\")  git_ahead_behind(upstream = NULL, ref = \"HEAD\", repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_rebase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cherry-Pick and Rebase — git_rebase","text":"upstream branch want rewind re-apply local commits. default uses remote upstream branch current state git server, simulating git_pull. repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. commit id commit cherry pick ref string branch/tag/commit","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_rebase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cherry-Pick and Rebase — git_rebase","text":"git_rebase_list shows local commits missing upstream history, conflict upstream changes. performing rebase dry-run, without committing anything. conflicts, can use git_rebase_commit rewind rebase branch onto upstream. Gert support clean rebase; never leaves repository unfinished \"rebasing\" state. conflicts arise, git_rebase_commit raise error without making changes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_remote.html","id":null,"dir":"Reference","previous_headings":"","what":"Git Remotes — git_remote","title":"Git Remotes — git_remote","text":"List, add, configure, remove remotes.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_remote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Git Remotes — git_remote","text":"","code":"git_remote_list(repo = \".\")  git_remote_add(url, name = \"origin\", refspec = NULL, repo = \".\")  git_remote_remove(remote, repo = \".\")  git_remote_info(remote = NULL, repo = \".\")  git_remote_set_url(url, remote = NULL, repo = \".\")  git_remote_set_pushurl(url, remote = NULL, repo = \".\")  git_remote_refspecs(remote = NULL, repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_remote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Git Remotes — git_remote","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. url server url (https ssh) name unique name new remote refspec optional string remote fetch value remote name existing remote. Default NULL means remote upstream current branch.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or discover a local Git repository — git_repo","title":"Create or discover a local Git repository — git_repo","text":"Use git_init() create new repository git_find() discover existing local repository. git_info() shows basic information repository, SHA branch current HEAD.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or discover a local Git repository — git_repo","text":"","code":"git_init(path = \".\", bare = FALSE)  git_find(path = \".\")  git_info(repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or discover a local Git repository — git_repo","text":"path location git repository, see details. bare true, Git repository without working directory created repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_repo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or discover a local Git repository — git_repo","text":"path Git repository.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_repo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create or discover a local Git repository — git_repo","text":"git_init() path parameter sets directory git repository create. directory already exists, must empty. exist, created, along intermediate directories yet exist. git_find() path arguments specifies directory start search git repository. git repository , parent directory consulted, parent's parent, .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_repo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or discover a local Git repository — git_repo","text":"","code":"# directory does not yet exist r <- tempfile(pattern = \"gert\") git_init(r) git_find(r) #> [1] \"/tmp/Rtmp0bolk4/gert7004db3eaab\"  # create a child directory, then a grandchild, then search r_grandchild_dir <- file.path(r, \"aaa\", \"bbb\") dir.create(r_grandchild_dir, recursive = TRUE) git_find(r_grandchild_dir) #> [1] \"/tmp/Rtmp0bolk4/gert7004db3eaab\"  # cleanup unlink(r, recursive = TRUE)  # directory exists but is empty r <- tempfile(pattern = \"gert\") dir.create(r) git_init(r) git_find(r) #> [1] \"/tmp/Rtmp0bolk4/gert7005dd6725c\"  # cleanup unlink(r, recursive = TRUE)"},{"path":"https://docs.ropensci.org/gert/reference/git_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset your repo to a previous state — git_reset","title":"Reset your repo to a previous state — git_reset","text":"git_reset_hard() resets index working tree git_reset_soft() touch index file working tree git_reset_mixed() resets index working tree.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset your repo to a previous state — git_reset","text":"","code":"git_reset_hard(ref = \"HEAD\", repo = \".\")  git_reset_soft(ref = \"HEAD\", repo = \".\")  git_reset_mixed(ref = \"HEAD\", repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset your repo to a previous state — git_reset","text":"ref string branch/tag/commit repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Author Signature — git_signature","title":"Author Signature — git_signature","text":"signature contains author timestamp commit. commit includes signature author committer (can identical).","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Author Signature — git_signature","text":"","code":"git_signature_default(repo = \".\")  git_signature(name, email, time = NULL)  git_signature_parse(sig)"},{"path":"https://docs.ropensci.org/gert/reference/git_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Author Signature — git_signature","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. name Real name committer email Email address committer time timestamp class POSIXt NULL sig string proper \"First Last <@email.com>\" format, see details.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_signature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Author Signature — git_signature","text":"signature string format \"Real Name <email> timestamp tzoffset\". timestamp tzoffset piece can omitted case current local time used. omitted, timestamp must contain number seconds since Unix epoch tzoffset timezone offset hhmm format (note lack colon separator)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_signature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Author Signature — git_signature","text":"","code":"# Your default user try(git_signature_default()) #> Error in libgit2::git_repository_open_ext :  #>   could not find repository at '/tmp/RtmpGCNmgL/gert/reference'  # Specify explicit name and email git_signature(\"Some committer\", \"sarah@gmail.com\") #> [git signature] #> Author: Some committer <sarah@gmail.com> #> Date: Mon Oct 21 19:15:42 2024 +0000  # Create signature for an hour ago (sig <- git_signature(\"Han\", \"han@company.com\", Sys.time() - 3600)) #> [git signature] #> Author: Han <han@company.com> #> Date: Mon Oct 21 18:15:42 2024 +0000  # Parse a signature git_signature_parse(sig) #> $name #> [1] \"Han\" #>  #> $email #> [1] \"han@company.com\" #>  #> $time #> [1] \"2024-10-21 18:15:42 UTC\" #>  #> $offset #> [1] 0 #>  git_signature_parse(\"Emma <emma@mu.edu>\") #> $name #> [1] \"Emma\" #>  #> $email #> [1] \"emma@mu.edu\" #>  #> $time #> [1] \"2024-10-21 19:15:42 UTC\" #>  #> $offset #> [1] 0 #>"},{"path":"https://docs.ropensci.org/gert/reference/git_stash.html","id":null,"dir":"Reference","previous_headings":"","what":"Stashing changes — git_stash","title":"Stashing changes — git_stash","text":"Temporary stash away changed working directory.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_stash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stashing changes — git_stash","text":"","code":"git_stash_save(   message = \"\",   keep_index = FALSE,   include_untracked = FALSE,   include_ignored = FALSE,   repo = \".\" )  git_stash_pop(index = 0, repo = \".\")  git_stash_drop(index = 0, repo = \".\")  git_stash_list(repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_stash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stashing changes — git_stash","text":"message optional message store stash keep_index changes already added index left intact working directory include_untracked untracked files also stashed cleaned working directory include_ignored ignored files also stashed cleaned working directory repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. index position within stash list. 0 points recent stashed state.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/git_submodule.html","id":null,"dir":"Reference","previous_headings":"","what":"Submodules — git_submodule_list","title":"Submodules — git_submodule_list","text":"Interact submodules repository.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_submodule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submodules — git_submodule_list","text":"","code":"git_submodule_list(repo = \".\")  git_submodule_info(submodule, repo = \".\")  git_submodule_init(submodule, overwrite = FALSE, repo = \".\")  git_submodule_set_to(submodule, ref, checkout = TRUE, repo = \".\")  git_submodule_add(url, path = basename(url), ref = \"HEAD\", ..., repo = \".\")  git_submodule_fetch(submodule, ..., repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_submodule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submodules — git_submodule_list","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. submodule name submodule overwrite overwrite existing entries ref branch tag hash checkout actually switch contents directory commit url full git url submodule path relative submodule ... extra arguments git_fetch authentication things","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Git Tag — git_tag","title":"Git Tag — git_tag","text":"Create list tags.","code":""},{"path":"https://docs.ropensci.org/gert/reference/git_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Git Tag — git_tag","text":"","code":"git_tag_list(match = \"*\", repo = \".\")  git_tag_create(name, message, ref = \"HEAD\", repo = \".\")  git_tag_delete(name, repo = \".\")  git_tag_push(name, ..., repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/git_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Git Tag — git_tag","text":"match pattern filter tags (use * wildcard) repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. name tag name message tag message ref target reference tag ... arguments passed git_push","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gert/reference/github.html","id":null,"dir":"Reference","previous_headings":"","what":"GitHub Wrappers — git_checkout_pull_request","title":"GitHub Wrappers — git_checkout_pull_request","text":"Fetch checkout pull requests.","code":""},{"path":"https://docs.ropensci.org/gert/reference/github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GitHub Wrappers — git_checkout_pull_request","text":"","code":"git_checkout_pull_request(pr = 1, remote = NULL, repo = \".\")  git_fetch_pull_requests(pr = \"*\", remote = NULL, repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GitHub Wrappers — git_checkout_pull_request","text":"pr number PR fetch check . Use \"*\" fetch pull requests. remote Optional. Name remote listed git_remote_list(). unspecified current branch already tracking branch remote branch, remote honored. Otherwise, defaults origin. repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters.","code":""},{"path":"https://docs.ropensci.org/gert/reference/github.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GitHub Wrappers — git_checkout_pull_request","text":"default git_fetch_pull_requests download PR branches. remove simply use git_fetch(prune = TRUE).","code":""},{"path":"https://docs.ropensci.org/gert/reference/libgit2_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Show libgit2 version and capabilities — libgit2_config","title":"Show libgit2 version and capabilities — libgit2_config","text":"libgit2_config() reveals version libgit2 gert using features supported, whether able use ssh remotes.","code":""},{"path":"https://docs.ropensci.org/gert/reference/libgit2_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show libgit2 version and capabilities — libgit2_config","text":"","code":"libgit2_config()"},{"path":"https://docs.ropensci.org/gert/reference/libgit2_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show libgit2 version and capabilities — libgit2_config","text":"","code":"libgit2_config() #> $version #> [1] ‘1.7.2’ #>  #> $ssh #> [1] TRUE #>  #> $https #> [1] TRUE #>  #> $threads #> [1] TRUE #>  #> $config.global #> [1] \"/github/home/.gitconfig\" #>  #> $config.system #> [1] \"\" #>  #> $config.home #> [1] \"/github/home\" #>"},{"path":"https://docs.ropensci.org/gert/reference/user_is_configured.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a Git user is configured — user_is_configured","title":"Test if a Git user is configured — user_is_configured","text":"function exists mostly guard examples rely user configured, order make commits. user_is_configured() makes distinction local global user config.","code":""},{"path":"https://docs.ropensci.org/gert/reference/user_is_configured.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a Git user is configured — user_is_configured","text":"","code":"user_is_configured(repo = \".\")"},{"path":"https://docs.ropensci.org/gert/reference/user_is_configured.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a Git user is configured — user_is_configured","text":"repo optional repo, sense git_open().","code":""},{"path":"https://docs.ropensci.org/gert/reference/user_is_configured.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a Git user is configured — user_is_configured","text":"TRUE user.name user.email set locally globally, FALSE otherwise.","code":""},{"path":"https://docs.ropensci.org/gert/reference/user_is_configured.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a Git user is configured — user_is_configured","text":"","code":"user_is_configured() #> [1] FALSE"}]
